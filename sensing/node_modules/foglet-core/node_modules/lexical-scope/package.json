{
  "_args": [
    [
      "lexical-scope@1.2.0",
      "/home/travis/build/RAN3D/foglet-core"
    ]
  ],
  "_from": "lexical-scope@1.2.0",
  "_id": "lexical-scope@1.2.0",
  "_inBundle": false,
  "_integrity": "sha1-/Ope3HBKSzqHls3KQZw6CvryLfQ=",
  "_location": "/foglet-core/lexical-scope",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "lexical-scope",
    "fetchSpec": "1.2.0",
    "name": "lexical-scope",
    "raw": "lexical-scope@1.2.0",
    "rawSpec": "1.2.0",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "/foglet-core/insert-module-globals"
  ],
  "_resolved": "https://registry.npmjs.org/lexical-scope/-/lexical-scope-1.2.0.tgz",
  "_shrinkwrap": null,
  "_spec": "1.2.0",
  "_where": "/home/travis/build/RAN3D/foglet-core",
  "author": {
    "email": "mail@substack.net",
    "name": "James Halliday",
    "url": "http://substack.net"
  },
  "bugs": {
    "url": "https://github.com/substack/lexical-scope/issues"
  },
  "dependencies": {
    "astw": "^2.0.0"
  },
  "description": "detect global and local lexical identifiers from javascript source code",
  "devDependencies": {
    "brfs": "~0.0.3",
    "tape": "~2.4.1"
  },
  "homepage": "https://github.com/substack/lexical-scope",
  "keywords": [
    "ast",
    "exported",
    "global",
    "implicit",
    "lexical",
    "local",
    "name",
    "variable"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "lexical-scope",
  "optionalDependencies": {},
  "readme": "# lexical-scope\n\ndetect global and local lexical identifiers from javascript source code\n\n[![browser support](http://ci.testling.com/substack/lexical-scope.png)](http://ci.testling.com/substack/lexical-scope)\n\n[![build status](https://secure.travis-ci.org/substack/lexical-scope.png)](http://travis-ci.org/substack/lexical-scope)\n\n# example\n\n``` js\nvar detect = require('lexical-scope');\nvar fs = require('fs');\nvar src = fs.readFileSync(__dirname + '/src.js');\n\nvar scope = detect(src);\nconsole.log(JSON.stringify(scope,null,2));\n```\n\ninput:\n\n```\nvar x = 5;\nvar y = 3, z = 2;\n\nw.foo();\nw = 2;\n\nRAWR=444;\nRAWR.foo();\n\nBLARG=3;\n\nfoo(function () {\n    var BAR = 3;\n    process.nextTick(function (ZZZZZZZZZZZZ) {\n        console.log('beep boop');\n        var xyz = 4;\n        x += 10;\n        x.zzzzzz;\n        ZZZ=6;\n    });\n    function doom () {\n    }\n    ZZZ.foo();\n\n});\n\nconsole.log(xyz);\n```\n\noutput:\n\n```\n$ node example/detect.js\n{\n  \"locals\": {\n    \"\": [\n      \"x\",\n      \"y\",\n      \"z\"\n    ],\n    \"body.7.expression.body.7.arguments.0\": [\n      \"BAR\",\n      \"doom\"\n    ],\n    \"body.7.expression.body.7.arguments.0.body.body.1.expression.body.1.arguments.0\": [\n      \"xyz\",\n      \"ZZZZZZZZZZZZ\"\n    ],\n    \"body.7.expression.body.7.arguments.0.body.body.2\": []\n  },\n  \"globals\": {\n    \"implicit\": [\n      \"w\",\n      \"foo\",\n      \"process\",\n      \"console\",\n      \"xyz\"\n    ],\n    \"implicitProperties\": {\n      \"w\": [\n        \"foo\"\n      ],\n      \"foo\": [\n        \"()\"\n      ],\n      \"process\": [\n        \"nextTick\"\n      ],\n      \"console\": [\n        \"log\"\n      ],\n      \"xyz\": [\n        \"*\"\n      ]\n    },\n    \"exported\": [\n      \"w\",\n      \"RAWR\",\n      \"BLARG\",\n      \"ZZZ\"\n    ]\n  }\n}\n```\n\n# live demo\n\nIf you are using a modern browser, you can go to http://lexical-scope.forbeslindesay.co.uk/ for a live demo.\n\n# methods\n\n``` js\nvar detect = require('lexical-scope')\n```\n\n## var scope = detect(src)\n\nReturn a `scope` structure from a javascript source string `src`.\n\n`scope.locals` maps scope name keys to an array of local variable names declared\nwith `var`. The key name `''` refers to the top-level scope.\n\n`scope.globals.implicit` contains the global variable names that are expected to\nalready exist in the environment by the script.\n\n`scope.globals.explicit` contains the global variable names that are exported by\nthe script.\n\n`scope.globals.implicitProperties` contains the properties of global variable\nnames that have been used. There are two special implicit property names:\n\n* `\"()\"` - when an implicit variable has been called\n* `\"*\"` - when an implicit variable has been used in a context that is not a\nproperty and not a call\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install lexical-scope\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/lexical-scope.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "testling": {
    "browsers": [
      "chrome/20",
      "chrome/latest",
      "firefox/10",
      "firefox/15",
      "firefox/latest",
      "ie/10",
      "ie/6",
      "ie/7",
      "ie/8",
      "ie/9",
      "opera/11.0",
      "opera/latest",
      "safari/latest"
    ],
    "files": "test/*.js"
  },
  "version": "1.2.0"
}
