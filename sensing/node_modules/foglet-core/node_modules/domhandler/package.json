{
  "_args": [
    [
      "domhandler@2.4.1",
      "/home/travis/build/RAN3D/foglet-core"
    ]
  ],
  "_from": "domhandler@2.4.1",
  "_id": "domhandler@2.4.1",
  "_inBundle": false,
  "_integrity": "sha1-iS5HAAqZvlW783dP/qBWHYh5wlk=",
  "_location": "/foglet-core/domhandler",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "domhandler",
    "fetchSpec": "2.4.1",
    "name": "domhandler",
    "raw": "domhandler@2.4.1",
    "rawSpec": "2.4.1",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "/foglet-core/htmlparser2"
  ],
  "_resolved": "https://registry.npmjs.org/domhandler/-/domhandler-2.4.1.tgz",
  "_shrinkwrap": null,
  "_spec": "2.4.1",
  "_where": "/home/travis/build/RAN3D/foglet-core",
  "author": {
    "email": "me@feedic.com",
    "name": "Felix Boehm"
  },
  "bugs": {
    "url": "https://github.com/fb55/DomHandler/issues"
  },
  "dependencies": {
    "domelementtype": "1"
  },
  "description": "handler for htmlparser2 that turns pages into a dom",
  "devDependencies": {
    "htmlparser2": "^3.9.0",
    "jshint": "^2.9.1",
    "mocha": "^3.0.2"
  },
  "directories": {
    "test": "tests"
  },
  "homepage": "https://github.com/fb55/DomHandler#readme",
  "jshintConfig": {
    "globals": {
      "it": true
    },
    "node": true,
    "proto": true,
    "quotmark": "double",
    "trailing": true,
    "undef": true,
    "unused": true
  },
  "keywords": [
    "dom",
    "htmlparser2"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "name": "domhandler",
  "optionalDependencies": {},
  "readme": "# domhandler [![Build Status](https://travis-ci.org/fb55/domhandler.svg?branch=master)](https://travis-ci.org/fb55/domhandler)\n\nThe DOM handler (formally known as DefaultHandler) creates a tree containing all nodes of a page. The tree may be manipulated using the [domutils](https://github.com/fb55/domutils) library.\n\n## Usage\n```javascript\nvar handler = new DomHandler([ <func> callback(err, dom), ] [ <obj> options ]);\n// var parser = new Parser(handler[, options]);\n```\n\nAvailable options are described below.\n\n## Example\n```javascript\nvar htmlparser = require(\"htmlparser2\");\nvar rawHtml = \"Xyz <script language= javascript>var foo = '<<bar>>';< /  script><!--<!-- Waah! -- -->\";\nvar handler = new htmlparser.DomHandler(function (error, dom) {\n    if (error)\n    \t[...do something for errors...]\n    else\n    \t[...parsing done, do something...]\n        console.log(dom);\n});\nvar parser = new htmlparser.Parser(handler);\nparser.write(rawHtml);\nparser.end();\n```\n\nOutput:\n\n```javascript\n[{\n    data: 'Xyz ',\n    type: 'text'\n}, {\n    type: 'script',\n    name: 'script',\n    attribs: {\n    \tlanguage: 'javascript'\n    },\n    children: [{\n    \tdata: 'var foo = \\'<bar>\\';<',\n    \ttype: 'text'\n    }]\n}, {\n    data: '<!-- Waah! -- ',\n    type: 'comment'\n}]\n```\n\n## Option: normalizeWhitespace\nIndicates whether the whitespace in text nodes should be normalized (= all whitespace should be replaced with single spaces). The default value is \"false\". \n\nThe following HTML will be used:\n\n```html\n<font>\n\t<br>this is the text\n<font>\n```\n\n### Example: true\n\n```javascript\n[{\n    type: 'tag',\n    name: 'font',\n    children: [{\n    \tdata: ' ',\n    \ttype: 'text'\n    }, {\n    \ttype: 'tag',\n    \tname: 'br'\n    }, {\n    \tdata: 'this is the text ',\n    \ttype: 'text'\n    }, {\n    \ttype: 'tag',\n    \tname: 'font'\n    }]\n}]\n```\n\n### Example: false\n\n```javascript\n[{\n    type: 'tag',\n    name: 'font',\n    children: [{\n    \tdata: '\\n\\t',\n    \ttype: 'text'\n    }, {\n    \ttype: 'tag',\n    \tname: 'br'\n    }, {\n    \tdata: 'this is the text\\n',\n    \ttype: 'text'\n    }, {\n    \ttype: 'tag',\n    \tname: 'font'\n    }]\n}]\n```\n\n## Option: withDomLvl1\n\nAdds DOM level 1 properties to all elements.\n\n<!-- TODO: description -->\n\n## Option: withStartIndices\nIndicates whether a `startIndex` property will be added to nodes. When the parser is used in a non-streaming fashion, `startIndex` is an integer indicating the position of the start of the node in the document. The default value is \"false\".\n\n## Option: withEndIndices\nIndicates whether a `endIndex` property will be added to nodes. When the parser is used in a non-streaming fashion, `endIndex` is an integer indicating the position of the end of the node in the document. The default value is \"false\".\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/fb55/DomHandler.git"
  },
  "scripts": {
    "test": "mocha -R list && jshint index.js test/"
  },
  "version": "2.4.1"
}
